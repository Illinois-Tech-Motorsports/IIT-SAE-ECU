/**
 * @file CanBusAddresses.def
 * @author IR
 * @brief Define incoming CAN line addresses
 * @version 0.2
 * @date 2020-11-15
 * 
 * @copyright Copyright (c) 2020
 * 
 */

#ifndef __ECU_CANBUS_ADDRESSES_H__
// @cond
#define __ECU_CANBUS_ADDRESSES_H__

#include "PPhelp.h"

// Address offsets
#define ADD_MC0_OFFSET -0x00A0
#define ADD_MC1_OFFSET 0x0000
#define ADD_BMS_OFFSET 0x0000

// Define addresses values here
#define ADD_BMS_DATA (0x06B0 + ADD_BMS_OFFSET)
#define ADD_BMS_BATT_TEMP (0x06B1 + ADD_BMS_OFFSET)
#define ADD_BMS_CURR_LIMIT (0x0202 + ADD_BMS_OFFSET)
// NOTE: RMS Docs state a default 0x0A0 Offset
#define ADD_MC0_TEMP1 (0x00A0 + ADD_MC0_OFFSET) // Temperatures #1
#define ADD_MC1_TEMP1 (0x00A0 + ADD_MC1_OFFSET)
#define ADD_MC0_TEMP2 (0x00A1 + ADD_MC0_OFFSET) // Temperatures #2
#define ADD_MC1_TEMP2 (0x00A1 + ADD_MC1_OFFSET)
#define ADD_MC0_TEMP3 (0x00A2 + ADD_MC0_OFFSET) // Temperatures #3
#define ADD_MC1_TEMP3 (0x00A2 + ADD_MC1_OFFSET)
#define ADD_MC0_RPM (0x00A5 + ADD_MC0_OFFSET) // Motor Position Information
#define ADD_MC1_RPM (0x00A5 + ADD_MC1_OFFSET)
#define ADD_MC0_CURR (0x00A6 + ADD_MC0_OFFSET) // Current Information
#define ADD_MC1_CURR (0x00A6 + ADD_MC1_OFFSET)
#define ADD_MC0_VOLT (0x00A7 + ADD_MC0_OFFSET) // Voltage Information
#define ADD_MC1_VOLT (0x00A7 + ADD_MC1_OFFSET)
#define ADD_MC0_FAULTS (0x00AB + ADD_MC0_OFFSET) // Fault Codes
#define ADD_MC1_FAULTS (0x00AB + ADD_MC1_OFFSET)
#define ADD_MC0_CTRL (0x00C0 + ADD_MC0_OFFSET) // For sending commands
#define ADD_MC1_CTRL (0x00C0 + ADD_MC1_OFFSET)
#define ADD_MC0_CLEAR (0x00C1 + ADD_MC0_OFFSET) // For clearing faults
#define ADD_MC1_CLEAR (0x00C1 + ADD_MC1_OFFSET)

#define CANPIN 3

// canPin addresses
#define ADD_CANPIN_ANALOG0 0x0110
#define ADD_CANPIN_ANALOG1 0x0120
#define ADD_CANPIN_ANALOG2 0x0130
#define ADD_CANPIN_ANALOG3 0x0140
#define ADD_CANPIN_ANALOG4 0x0150
#define ADD_CANPIN_DIGITAL0 0x0100
#define ADD_CANPIN_DIGITAL1 0x0200
// Logging address
#define ADD_AUX_LOGGING 0x0123
// Ping address
#define ADD_HEART 0x0321
// echo address
#define ADD_ECHO_DATA 0x0231
#define ADD_ECHO_DELAY 0x0232
// @endcond

/**
 * @brief Defines the Can bus addresses that will be used to receive and send data
 * 
 * Every definition is given a direction denoting whether it is incoming(INPUT) or outgoing(OUTPUT)
 * 
 * CANPIN can also be used for direction, this simply reserves the address and ensures it is used for canpins
 * 
 * Unless it is the last entry, this is how to add a new message
 * 
 * X(CAN address, direction) \
 * 
 * Only the last entry should NOT have a '\'
 * 
 * @note Currently, address 0xFFFFFFFF cannot be used
 */
#define CAN_ADDRESS                \
    X(ADD_BMS_DATA, INPUT)         \
    X(ADD_BMS_BATT_TEMP, INPUT)    \
    X(ADD_BMS_CURR_LIMIT, INPUT)   \
    X(ADD_MC0_VOLT, INPUT)         \
    X(ADD_MC1_VOLT, INPUT)         \
    X(ADD_MC0_TEMP1, INPUT)        \
    X(ADD_MC1_TEMP1, INPUT)        \
    X(ADD_MC0_TEMP2, INPUT)        \
    X(ADD_MC1_TEMP2, INPUT)        \
    X(ADD_MC0_TEMP3, INPUT)        \
    X(ADD_MC1_TEMP3, INPUT)        \
    X(ADD_MC0_RPM, INPUT)          \
    X(ADD_MC1_RPM, INPUT)          \
    X(ADD_MC0_CURR, INPUT)         \
    X(ADD_MC1_CURR, INPUT)         \
    X(ADD_MC0_CTRL, OUTPUT)        \
    X(ADD_MC1_CTRL, OUTPUT)        \
    X(ADD_MC0_CLEAR, OUTPUT)       \
    X(ADD_MC1_CLEAR, OUTPUT)       \
    X(ADD_MC0_FAULTS, INPUT)       \
    X(ADD_MC1_FAULTS, INPUT)       \
    X(ADD_CANPIN_ANALOG0, CANPIN)  \
    X(ADD_CANPIN_ANALOG1, CANPIN)  \
    X(ADD_CANPIN_ANALOG2, CANPIN)  \
    X(ADD_CANPIN_ANALOG3, CANPIN)  \
    X(ADD_CANPIN_ANALOG4, CANPIN)  \
    X(ADD_CANPIN_DIGITAL0, CANPIN) \
    X(ADD_CANPIN_DIGITAL1, CANPIN) \
    X(ADD_AUX_LOGGING, CANPIN)     \
    X(ADD_HEART, CANPIN)           \
    X(ADD_ECHO_DATA, CANPIN)       \
    X(ADD_ECHO_DELAY, CANPIN)

#endif // __ECU_CANBUS_ADDRESSES_H__